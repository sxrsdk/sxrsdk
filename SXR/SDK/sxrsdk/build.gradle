apply plugin: 'com.android.library'

repositories {
    flatDir {
        dirs 'src/main/libs'
    }
}

android {
    compileSdkVersion 26

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 26

        externalNativeBuild {
            ndkBuild {
                arguments = ["-j" + Runtime.runtime.availableProcessors()]
                if (rootProject.hasProperty("ARM64")) {
                    arguments += ['ARM64=true']
                }
            }
        }
        ndk {
            moduleName "sxr"
            if (rootProject.hasProperty("SXRSDK_ABI_FILTER")) {
                abiFilters rootProject.property("SXRSDK_ABI_FILTER")
            } else {
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
            }
        }
    }

    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }

    task buildInfo() {
        def commitId

        File head = new File(projectDir.absolutePath + '/../../../.git/HEAD')
        if (head.exists()) {
            def elements = head.text.split()
            if (elements.length > 0) {
                File commit = new File(projectDir.absolutePath + '/../../../.git/' + elements[elements.length-1])
                if (commit.exists()) {
                    commitId = commit.text.trim();
                } else {
                    println "HEAD commit missing"
                    return
                }
            } else {
                println "HEAD elements empty"
                return
            }
        } else {
            println "HEAD file missing"
            return
        }

        File source = new File(projectDir.absolutePath + '/src/main/jni', 'buildinfo.cpp')
        if (source.exists() && source.text.contains(commitId)) {
            return
        }
        def javaSource = new File(projectDir.absolutePath + '/src/main/java/com/samsungxr/', 'BuildInfo.java')

        source.text = '#include "util/sxr_log.h"\n'
        source.text += '#include <jni.h>\n\n'
        source.text += 'jint JNI_OnLoad(JavaVM *vm, void *reserved) {\n'
        source.text += '    LOGI("FRAMEWORK-CPP  HEAD: ' + commitId + '");\n'
        source.text += '    JNIEnv* env;\n';
        source.text += '    if(JNI_OK == vm->AttachCurrentThread(&env, 0)) {\n'
        source.text += '        jclass java_class = env->FindClass("com/samsungxr/BuildInfo");\n'
        source.text += '        if (env->ExceptionCheck()) {\n'
        source.text += '            env->ExceptionClear();\n'
        source.text += '        }\n'
        source.text += '        if(nullptr != java_class) {\n'
        source.text += '            env->GetStaticFieldID(java_class, "HEAD", "java/lang/String");\n'
        source.text += '            if (env->ExceptionCheck()) {\n'
        source.text += '                env->ExceptionClear();\n'
        source.text += '            }\n'
        source.text += '            env->DeleteLocalRef(java_class);\n'
        source.text += '        }\n'
        source.text += '    }\n'
        source.text += '    return JNI_VERSION_1_6;\n'
        source.text += '}'

        javaSource.text = 'package com.samsungxr;\n'
        javaSource.text += 'public class BuildInfo {\n'
        javaSource.text += '    public final static String HEAD="' + commitId + '";\n'
        javaSource.text += '    static { android.util.Log.i("sxr", "FRAMEWORK-JAVA HEAD: " + HEAD); }\n'
        javaSource.text += '}\n'
    }

    buildTypes {
        debug {
            debuggable = true
            jniDebuggable = true
            sourceSets.debug {
                jniLibs {
                    srcDir "${android.ndkDirectory}/sources/third_party/vulkan/src/build-android/jniLibs"
                }
            }
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }
    }

    sourceSets.main {
        java.srcDirs = ['src/main/java']
        resources.srcDir 'src/main/libs'
    }

    packagingOptions {
        exclude 'lib/mips/*'
        exclude 'lib/mips64/*'
    }
}

project.ext.jomlVersion = "1.9.3-SNAPSHOT"
project.ext.gsonVersion = '2.8.2'

dependencies {
    api fileTree(dir: 'src/main/libs', include: ['*.jar'])
    api "org.joml:joml-android:${jomlVersion}"
    implementation "com.google.code.gson:gson:$gsonVersion"
}

clean {}.doLast {
    def sxrLibs = project.rootDir.absolutePath + "/../sxr-libs"
    if (file(sxrLibs).exists()) {
        project.delete(sxrLibs + '/' + project.name + '-release.aar')
        project.delete(sxrLibs + '/' + project.name + '-debug.aar')
        project.delete(sxrLibs + '/' + project.name + '-for-plugins.zip')
    }
}

task packageForPlugins(type: Zip) {
    outputs.upToDateWhen { false }

    baseName project.name + '-for-plugins'

    from './build/intermediates/bundles/release/classes.jar'
    rename 'classes.jar', project.name + '-classes.jar'

    from './src/main/libs/'
    include '*.jar'

    from './build/intermediates/ndkBuild/release/obj/local/armeabi-v7a/'
    include '*.so'

    doLast {
        copy {
            from 'build/distributions/'
            into project.rootDir.absolutePath + "/../sxr-libs"
            include project.name + '-for-plugins.zip'
        }
    }
}

task copyJarToBin(type: Copy) {
    outputs.upToDateWhen { false }
    from tasks.matching { it.name.startsWith('bundle') }
    into project.rootDir.absolutePath + "/../sxr-libs"
}

tasks.whenTaskAdded { task ->
    if (task.name == 'externalNativeBuildDebug') {
        task.dependsOn 'buildInfo'
    } else if (task.name == 'externalNativeBuildRelease') {
        task.dependsOn 'buildInfo'
    } else if (task.name == 'bundleDebugAar') {
        task.finalizedBy(copyJarToBin)
    } else if (task.name == 'bundleReleaseAar') {
        if (!rootProject.hasProperty("do_not_package_for_plugins")) {
            task.finalizedBy(packageForPlugins)
        }
        task.finalizedBy(copyJarToBin)
    }
}
